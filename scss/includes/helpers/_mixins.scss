/* ----------------------------------------- */
/* MIXINS */
/* ----------------------------------------- */

// HEIGHT WIDTH FULL 

@mixin fillContainer {
	width:100%;
	height:100%;
}



// FLEXBOX

@mixin flex-row($justify, $align){
	display:flex;
	flex-direction:row;
	flex-wrap:wrap;
	justify-content: $justify;
	align-items: $align;
}

@mixin flex-col($justify, $align){
	display:flex;
	flex-direction:column;
	flex-wrap:wrap;
	justify-content: $justify;
	align-items: $align;
}


// BREAKPOINTS

@mixin mq($breakpoint) {
	@if $breakpoint == phone {
	  @media (max-width: 400px) { @content; }
	} @else if $breakpoint == phone-wide {
	  @media (max-width: 480px) { @content; }
	} @else if $breakpoint == phablet {
	  @media (max-width: 560px) { @content; }
	} @else if $breakpoint == tablet-small {
	  @media (max-width: 640px) { @content; }
	} @else if $breakpoint == tablet {
	  @media (max-width: 768px) { @content; }
	} @else if $breakpoint == tablet-wide {
	  @media (max-width: 1024px) { @content; }
	} @else if $breakpoint == desktop {
	  @media (max-width: 1248px) { @content; }
	} @else if $breakpoint == desktop-wide {
	  @media (max-width: 1440px) { @content; }
	}
  }

// .site-header {
//     padding: 2rem;
//     font-size: 1.8rem;
//     @include mq('tablet-wide') {
//         padding-top: 4rem;
//         font-size: 2.4rem;
//     }
// }

// Fluid Sizing

@mixin fluid-property($property: font-size, $min: 16px, $max: 22px) {
	#{$property}: calc(#{$min} + #{strip-unit($max - $min)} * ((100vw - #{map-get($viewports, 'smallest')}) / #{strip-unit(map-get($viewports, 'largest') - map-get($viewports, 'smallest'))}));
}

@mixin fluid-font-size($min, $max) {
	@include fluid-property(font-size, $min, $max);
}


// Others

@mixin list-reset() {
	margin: 0;
	padding: 0;

	li {
		margin: 0;
		padding: 0;
		list-style: none;
	}
}

@mixin cover-bg($position: center 0) {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: $position;
}

// Buttons

@mixin button($style: 'default') {
	display: inline-flex;
	justify-content: center;
	align-items: center;
	padding: 20px 40px;
}


// PLACEHOLDERS

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// input,  
// textarea {  
//     @include input-placeholder {
//         color: $grey;
//     }
// }

// TRUNCATE

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A Sass map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
	// Get the number of provided breakpoints
	$length: length(map-keys($map));
  
	// Error if the number of breakpoints is < 2
	@if ($length < 2) {
	  @error "poly-fluid-sizing() $map requires at least values"
	}
  
	// Sort the map by viewport width (key)
	$map: map-sort($map);
	$keys: map-keys($map);
  
	// Minimum size
	#{$property}: map-get($map, nth($keys,1));
  
	// Interpolated size through breakpoints
	@for $i from 1 through ($length - 1) {
	  @media (min-width:nth($keys,$i)) {
		$value1: map-get($map, nth($keys,$i));
		$value2: map-get($map, nth($keys,($i + 1)));
		// If values are not equal, perform linear interpolation
		@if ($value1 != $value2) {
		  #{$property}: linear-interpolation((nth($keys,$i): $value1, nth($keys,($i+1)): $value2));
		} @else {
		  #{$property}: $value1;
		}
	  }
	}
  
	// Maxmimum size
	@media (min-width:nth($keys,$length)) {
	  #{$property}: map-get($map, nth($keys,$length));
	}
  }